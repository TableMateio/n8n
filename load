#!/bin/bash

echo "🚀 N8N Load Script - Syncing Project & Database"
echo "=============================================="

# Check which database file exists and is in use
OUTER_DB=~/.n8n/database.sqlite
INNER_DB=~/.n8n/.n8n/database.sqlite
OUTER_SIZE=0
INNER_SIZE=0

if [ -f "$OUTER_DB" ]; then
  OUTER_SIZE=$(stat -f "%z" "$OUTER_DB")
  OUTER_MODIFIED_TIME=$(stat -f "%m" "$OUTER_DB" 2>/dev/null || echo "0")
fi

if [ -f "$INNER_DB" ]; then
  INNER_SIZE=$(stat -f "%z" "$INNER_DB")
  INNER_MODIFIED_TIME=$(stat -f "%m" "$INNER_DB" 2>/dev/null || echo "0")
fi

# Convert bytes to readable format (manual since numfmt isn't available on macOS)
format_bytes() {
    local bytes=$1
    if [ $bytes -gt 1073741824 ]; then
        echo "$(( bytes / 1073741824 )) GB"
    elif [ $bytes -gt 1048576 ]; then
        echo "$(( bytes / 1048576 )) MB"
    elif [ $bytes -gt 1024 ]; then
        echo "$(( bytes / 1024 )) KB"
    else
        echo "$bytes bytes"
    fi
}

echo "📊 Current Database Status:"
echo "   Outer database: $(format_bytes $OUTER_SIZE) (Last modified: $(date -r $OUTER_MODIFIED_TIME))"
echo "   Inner database: $(format_bytes $INNER_SIZE) (Last modified: $(date -r $INNER_MODIFIED_TIME))"

# Determine which directory to use based on which one has the larger DB
if [ $INNER_SIZE -gt $OUTER_SIZE ]; then
  echo "✅ Using inner directory (larger database)"
  TARGET_DB="$INNER_DB"
  TARGET_CONFIG=~/.n8n/.n8n/config
  LOCAL_MODIFIED_TIME=$INNER_MODIFIED_TIME
else
  echo "✅ Using outer directory (larger database or only available)"
  TARGET_DB="$OUTER_DB"
  TARGET_CONFIG=~/.n8n/config
  LOCAL_MODIFIED_TIME=$OUTER_MODIFIED_TIME
fi

echo ""
echo "🔄 Pulling latest code changes from Git..."
git pull

echo ""
echo "📋 Recent changes:"
git log --oneline -n 5

# Check if there's a local database backup
if [ -f "./database.sqlite.local" ]; then
    LOCAL_BACKUP_TIME=$(stat -f "%m" "./database.sqlite.local" 2>/dev/null || echo "0")

    echo ""
    echo "💾 Local database backup found: $(date -r $LOCAL_BACKUP_TIME)"

    if [ "$LOCAL_BACKUP_TIME" -gt "$LOCAL_MODIFIED_TIME" ]; then
        echo "⚠️  WARNING: Local backup is newer than your current database"
        echo "   Backup: $(date -r $LOCAL_BACKUP_TIME)"
        echo "   Current: $(date -r $LOCAL_MODIFIED_TIME)"

        read -p "Do you want to restore from the backup? (y/N): " confirm
        if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
            echo "🔄 Creating safety backup of current database..."
            cp "$TARGET_DB" "${TARGET_DB}.backup"

            echo "📥 Restoring database from local backup..."
            cp "./database.sqlite.local" "$TARGET_DB"
            echo "✅ Database restored successfully!"
        else
            echo "ℹ️  Keeping current database unchanged"
        fi
    else
        echo "ℹ️  Current database is newer than backup - no action needed"
    fi
else
    echo ""
    echo "ℹ️  No local database backup found"
    echo "   💡 Database syncs automatically via Dropbox"
fi

# Sync config if it exists
if [ -d "./config" ]; then
    echo ""
    echo "⚙️  Syncing configuration files..."
    rsync -av ./config/ "$TARGET_CONFIG/"
fi

echo ""
echo "✅ Load Complete!"
echo "   📁 Code: Updated from Git"
echo "   💾 Database: Managed via Dropbox sync"
echo "   ⚙️  Config: Synced to n8n directory"
echo ""
echo "💡 Your database automatically syncs via Dropbox since this"
echo "   project is in your Dropbox folder!"
